class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Point> queue = new LinkedList<>();
        int freshMangos = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length; j++) {
               if(grid[i][j] == 2) {
                   queue.offer(new Point(i, j));
               }
               
            }
        }
        queue.add(new Point(-1, -1));
        
        int minTime = contaminateOranges(queue, grid);
        System.out.println(Arrays.deepToString(grid));
        if(areMangosRemaining(grid)) {
            return -1;
        }
        return minTime;
      }
    
   
    
    private int contaminateOranges(Queue<Point> queue, int[][] grid) {
        int count = 0;
        while(!queue.isEmpty()) {
            Point p = queue.poll();
            if(p.row == -1) {
               if(!queue.isEmpty()) {
                count++;
                queue.add(new Point(-1, -1));
              }
            }
            else {
                addNeighbours(queue, p, grid);
            }
        }
        return count;
    }
    
    private void addNeighbours(Queue<Point> queue, Point point, int[][] grid) {
        
        int[] x_axis = new int[]{1, 0, -1, 0};
        int[] y_axis = new int[]{0, 1, 0, -1};
        
      for(int k = 0; k < 4; k++) {
          Point newPoint = new Point(point.row + y_axis[k], point.column + x_axis[k]); 
          if(isPointValid(newPoint, grid)) {
                queue.offer(newPoint);
                grid[newPoint.row][newPoint.column] = 2;
            }
        }
    }
    
    private boolean isPointValid(Point point, int[][] grid) {
        
        return point.row >= 0 
            && point.row < grid.length 
            && point.column >= 0 
            && point.column < grid[0].length
            && grid[point.row][point.column] == 1;
    }
    
     private boolean areMangosRemaining(int[][] grid) {
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    return true;
                }
            }
        }
         return false;
    }
    
    class Point {
        int row;
        int column;
        
        Point(int row, int column) {
            this.row = row;
            this.column = column;
        }
        
    }
    
}
